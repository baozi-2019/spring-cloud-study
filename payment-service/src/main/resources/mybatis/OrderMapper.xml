<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.baozi.payment.dao.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="org.baozi.payment.dao.DO.Order">
    <id column="order_id" jdbcType="BIGINT" property="orderId" />
    <id column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="out_trade_no" jdbcType="VARCHAR" property="outTradeNo" />
    <result column="customer_id" jdbcType="BIGINT" property="customerId" />
    <result column="pay_platform" jdbcType="CHAR" property="payPlatform" />
    <result column="pay_info_id" jdbcType="BIGINT" property="payInfoId" />
    <result column="total_amount" jdbcType="DECIMAL" property="totalAmount" />
    <result column="discount_amount" jdbcType="DECIMAL" property="discountAmount" />
    <result column="pay_amount" jdbcType="DECIMAL" property="payAmount" />
    <result column="refund_amount" jdbcType="DECIMAL" property="refundAmount" />
    <result column="order_remark" jdbcType="VARCHAR" property="orderRemark" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    order_id, create_time, out_trade_no, customer_id, pay_platform, pay_info_id, total_amount, 
    discount_amount, pay_amount, refund_amount, order_remark, update_time
  </sql>
  <select id="selectByExample" parameterType="org.baozi.payment.dao.DO.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="org.baozi.payment.dao.DO.OrderKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_order
    where order_id = #{orderId,jdbcType=BIGINT}
      and create_time = #{createTime,jdbcType=TIMESTAMP}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="org.baozi.payment.dao.DO.OrderKey">
    delete from t_order
    where order_id = #{orderId,jdbcType=BIGINT}
      and create_time = #{createTime,jdbcType=TIMESTAMP}
  </delete>
  <delete id="deleteByExample" parameterType="org.baozi.payment.dao.DO.OrderExample">
    delete from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.baozi.payment.dao.DO.Order">
    insert into t_order (order_id, create_time, out_trade_no, 
      customer_id, pay_platform, pay_info_id, 
      total_amount, discount_amount, pay_amount, 
      refund_amount, order_remark, update_time
      )
    values (#{orderId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{outTradeNo,jdbcType=VARCHAR}, 
      #{customerId,jdbcType=BIGINT}, #{payPlatform,jdbcType=CHAR}, #{payInfoId,jdbcType=BIGINT}, 
      #{totalAmount,jdbcType=DECIMAL}, #{discountAmount,jdbcType=DECIMAL}, #{payAmount,jdbcType=DECIMAL}, 
      #{refundAmount,jdbcType=DECIMAL}, #{orderRemark,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.baozi.payment.dao.DO.Order">
    insert into t_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="payPlatform != null">
        pay_platform,
      </if>
      <if test="payInfoId != null">
        pay_info_id,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="discountAmount != null">
        discount_amount,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="refundAmount != null">
        refund_amount,
      </if>
      <if test="orderRemark != null">
        order_remark,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="payPlatform != null">
        #{payPlatform,jdbcType=CHAR},
      </if>
      <if test="payInfoId != null">
        #{payInfoId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="discountAmount != null">
        #{discountAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundAmount != null">
        #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderRemark != null">
        #{orderRemark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.baozi.payment.dao.DO.OrderExample" resultType="java.lang.Long">
    select count(*) from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_order
    <set>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.outTradeNo != null">
        out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="record.customerId != null">
        customer_id = #{record.customerId,jdbcType=BIGINT},
      </if>
      <if test="record.payPlatform != null">
        pay_platform = #{record.payPlatform,jdbcType=CHAR},
      </if>
      <if test="record.payInfoId != null">
        pay_info_id = #{record.payInfoId,jdbcType=BIGINT},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.discountAmount != null">
        discount_amount = #{record.discountAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.payAmount != null">
        pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.refundAmount != null">
        refund_amount = #{record.refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderRemark != null">
        order_remark = #{record.orderRemark,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_order
    set order_id = #{record.orderId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      customer_id = #{record.customerId,jdbcType=BIGINT},
      pay_platform = #{record.payPlatform,jdbcType=CHAR},
      pay_info_id = #{record.payInfoId,jdbcType=BIGINT},
      total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      discount_amount = #{record.discountAmount,jdbcType=DECIMAL},
      pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      refund_amount = #{record.refundAmount,jdbcType=DECIMAL},
      order_remark = #{record.orderRemark,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.baozi.payment.dao.DO.Order">
    update t_order
    <set>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=BIGINT},
      </if>
      <if test="payPlatform != null">
        pay_platform = #{payPlatform,jdbcType=CHAR},
      </if>
      <if test="payInfoId != null">
        pay_info_id = #{payInfoId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="discountAmount != null">
        discount_amount = #{discountAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundAmount != null">
        refund_amount = #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderRemark != null">
        order_remark = #{orderRemark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=BIGINT}
      and create_time = #{createTime,jdbcType=TIMESTAMP}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.baozi.payment.dao.DO.Order">
    update t_order
    set out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      customer_id = #{customerId,jdbcType=BIGINT},
      pay_platform = #{payPlatform,jdbcType=CHAR},
      pay_info_id = #{payInfoId,jdbcType=BIGINT},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      discount_amount = #{discountAmount,jdbcType=DECIMAL},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      refund_amount = #{refundAmount,jdbcType=DECIMAL},
      order_remark = #{orderRemark,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=BIGINT}
      and create_time = #{createTime,jdbcType=TIMESTAMP}
  </update>
  <insert id="upsertSelective" parameterType="org.baozi.payment.dao.DO.Order">
    insert into t_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="payPlatform != null">
        pay_platform,
      </if>
      <if test="payInfoId != null">
        pay_info_id,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="discountAmount != null">
        discount_amount,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="refundAmount != null">
        refund_amount,
      </if>
      <if test="orderRemark != null">
        order_remark,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="payPlatform != null">
        #{payPlatform,jdbcType=CHAR},
      </if>
      <if test="payInfoId != null">
        #{payInfoId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="discountAmount != null">
        #{discountAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundAmount != null">
        #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderRemark != null">
        #{orderRemark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=BIGINT},
      </if>
      <if test="payPlatform != null">
        pay_platform = #{payPlatform,jdbcType=CHAR},
      </if>
      <if test="payInfoId != null">
        pay_info_id = #{payInfoId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="discountAmount != null">
        discount_amount = #{discountAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundAmount != null">
        refund_amount = #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderRemark != null">
        order_remark = #{orderRemark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <insert id="upsert" parameterType="org.baozi.payment.dao.DO.Order">
    insert into t_order
    (order_id, create_time, out_trade_no, customer_id, pay_platform, pay_info_id, total_amount, 
      discount_amount, pay_amount, refund_amount, order_remark, update_time)
    values
    (#{orderId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{outTradeNo,jdbcType=VARCHAR}, 
      #{customerId,jdbcType=BIGINT}, #{payPlatform,jdbcType=CHAR}, #{payInfoId,jdbcType=BIGINT}, 
      #{totalAmount,jdbcType=DECIMAL}, #{discountAmount,jdbcType=DECIMAL}, #{payAmount,jdbcType=DECIMAL}, 
      #{refundAmount,jdbcType=DECIMAL}, #{orderRemark,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}
      )
    on duplicate key update 
    order_id = #{orderId,jdbcType=BIGINT}, 
    create_time = #{createTime,jdbcType=TIMESTAMP}, 
    out_trade_no = #{outTradeNo,jdbcType=VARCHAR}, 
    customer_id = #{customerId,jdbcType=BIGINT}, 
    pay_platform = #{payPlatform,jdbcType=CHAR}, 
    pay_info_id = #{payInfoId,jdbcType=BIGINT}, 
    total_amount = #{totalAmount,jdbcType=DECIMAL}, 
    discount_amount = #{discountAmount,jdbcType=DECIMAL}, 
    pay_amount = #{payAmount,jdbcType=DECIMAL}, 
    refund_amount = #{refundAmount,jdbcType=DECIMAL}, 
    order_remark = #{orderRemark,jdbcType=VARCHAR}, 
    update_time = #{updateTime,jdbcType=TIMESTAMP}
  </insert>
</mapper>